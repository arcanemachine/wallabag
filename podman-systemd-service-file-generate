#!/bin/bash

cd $(dirname "$0")

# use the name of the project directory as the name of the service
service_name=$(basename $(pwd))
service_file_path="$HOME/.config/systemd/user/$service_name.service"

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
  echo "This script generates a systemd service file.
The output will be sent to: '$service_file_path'

After running this command, you will need to reload systemd daemons (or reboot):
  - systemctl --user daemon-reload

To enable this service:
  - systemctl --user enable $service_name.service

To start this service:
  - systemctl --user start $service_name.service

In order to start this service on boot, you must enabling lingering for this user:
  - sudo loginctl enable-linger $USER

To output the service file template to the console, prefix the command with DRY_RUN=1:
  - e.g: 'DRY_RUN=1 ./podman-systemd-service-file-generate'"
  exit 0
fi

if [ "$DRY_RUN" == 1 ]; then
  output_to=/dev/stdout
else
  output_to=$service_file_path
fi

echo "[Unit]
Description=$service_name
Wants=network-online.target
After=network-online.target
Requires=podman.service
RequiresMountsFor=/run/user/$(id -u)/containers

[Service]
# Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
WorkingDirectory=$(pwd)
# Type=forking

# Shutdown container (if running) when unit is started
ExecStartPre=$(which docker-compose) -H unix:$XDG_RUNTIME_DIR/podman/podman.sock -f docker-compose.yml down

# Start container when unit is started
ExecStart=$(which docker-compose) -H unix:$XDG_RUNTIME_DIR/podman/podman.sock -f docker-compose.yml up --remove-orphans

# Stop all services
ExecStop=$(which docker-compose) -H unix:$XDG_RUNTIME_DIR/podman/podman.sock -f docker-compose.yml down

[Install]
WantedBy=default.target" > ${output_to}

if [ "$DRY_RUN" != "1" ]; then
  echo "done"
fi
